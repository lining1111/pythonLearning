apiVersion: v1 # api 文档版本
kind: Pod #资源对象类型
metadata: #Pod的元数据，描述Pod
  name: nginx-liveness
  labels: #定义Pod的标签，KV的 自定义的
    type: app
    version: 1.0.0 #自定义Pod的版本号
  namespace: 'default'
spec: # 期望Pod按照这里的描述进行创建
  containers:
    - name: nginx #容器的名称 自定义的
      image: nginx:1.7.9 # 指定容器的镜像 不能随便写，可以先用docker 搜索下看是否存在(docker search) 但是一般被墙了，就在网站搜索吧
      imagePullPolicy: IfNotPresent
      startupProbe:
#        httpGet:
#          port: 80
#          path: /index.html
#        tcpSocket:
#          port: 80
        exec:
          command:
            - sh
            - -c
            - "sleep 3;echo 'success' >/inited;"
        failureThreshold: 3 #失败多少次才算真正失败
        periodSeconds: 10 #间隔时间
        successThreshold: 1 #成功多少次算真正成功
        timeoutSeconds: 5 #超时时间
      livenessProbe:
        httpGet:
          port: 80
          path: /start.html
        failureThreshold: 3 #失败多少次才算真正失败
        periodSeconds: 10 #间隔时间
        successThreshold: 1 #成功多少次算真正成功
        timeoutSeconds: 5 #超时时间
      command: #指定容器启动时执行的命令
        - nginx
        - -g
        - 'daemon off;' # 相当于 nginx -g 'daemon off;'
      workingDir: /usr/share/nginx/html #定义启动时进入的目录
      ports:
      - name: http #端口名称
        containerPort: 80 #容器要监听的端口
        protocol: TCP #基于什么协议的
      env:
        - name: JVM_OPTS # 环境变量名称
          value: '-Xms128m -Xmx128m' # 环境变量的值
      resources:
        requests:
          cpu: 100m #限制 cpu 最少使用 0.1 个核心
          memory: 128Mi #限制内存最少使用 128M
        limits:
          cpu: 200m # 限制 cpu 最多使用 0.2 个核心
          memory: 256Mi # 限制 最多使用 256兆
  restartPolicy: OnFailure
